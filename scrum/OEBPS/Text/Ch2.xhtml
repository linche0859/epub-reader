<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body data-cfi="/4" class="calibre">
  <h1 data-cfi="/4/2" class="calibre1"><span class="num" data-cfi="/4/2/2">第2章</span>Scrum的由來</h1>

  <p data-cfi="/4/4" class="calibre2">對於被派到越南的美國戰鬥機飛行員來說，一輪班次意謂著要深入敵國領土執行一百次的飛行作戰任務。有50%的飛行員會被擊落，有些得以獲救，但大多數都未能平安返回。1967年，年輕的我是個初出茅蘆的戰鬥機飛行員，從位於愛達荷州的芒廷霍姆空軍基地（Mountain Home Air Force Base），被運送到位於泰國北部的烏隆皇家泰國空軍基地（Udorn Royal Thai Air Force Base），執行美國空軍當時最危險的任務之一：偵察。</p>

  <h2 id="sigil_toc_id_6" data-cfi="/4/6" class="calibre3">空軍教我的事</h2>

  <p data-cfi="/4/8" class="calibre2">當時距離利用掠奪者（Predator）無人偵察機執行偵察，或是可靠的衛星影像問世還久得很。我所駕駛的RF-4C幽靈偵察機會卸除所有武器，裝上相機和一個額外油箱。我的職責是要飛進敵軍陣地，讓同機的領航員能拍攝執行轟炸任務前後的照片。大多數的任務都在夜晚執行，我會在離地只有幾百呎處飛過熱帶的黑暗夜空，高度低到幾乎都要擦過樹梢了。在我飛越邊境進入北越時，機上的抬頭顯示器會像彈珠機一樣發亮，吵雜的飛彈警告系統會隨著一陣嗶嗶聲與鳴笛聲開啟。空中會因為高射炮射出的曳光彈而變得明亮，於是我知道，在幾分鐘內，飛彈雷達很快就會鎖定我的軍機，除非五百呎的高度已經低到足以讓我藏身於地面雜波中而不會被偵測到。</p>

  <p data-cfi="/4/10" class="calibre2">在這些時刻，我的腎上腺素都會飆升，但是我從未失去冷靜，危險反倒總是讓我沉著。我想這得歸功於我在空軍受過的風險控管訓練，我在訓練中學到四件該做的事：<b data-cfi="/4/10/2" class="calibre14">觀察（Observe）、導向（Orient）、決定（Decide）、行動（Act）</b>。具體而言，我會觀察目標區域，看好進入與退出熱區的最佳路徑，並在面對未知事件時釐清頭緒，接著就出於本能和直覺地果決行動。遲疑會讓飛行員喪命，但有勇無謀也會。一旦領航員拍好照片，我就會猛力把操縱桿往後拉，極力讓飛機向上攀升，遠離熱區，這時重力會讓我的視野縮小到只有針孔大小，而領航員也常常會因為重力而陷入昏迷，有時候還可能會腸失禁。但他從未抱怨過，因為我總是載著他平安返航。</p>

  <p data-cfi="/4/12" class="calibre2">那時我只是一個年輕的噴射機飛行員，只想在任務中存活，並不知道自己的飛行經驗，以及受過在生死交關時的思考與行動訓練，會形塑出我在之後人生中投入心力的方向。1967年，我跟著兩個中隊的F-4戰鬥機與兩個中隊的RF-4C偵察機來到越南，加起來一共有一百架飛機。RF-4C偵察機取代兩個中隊的RF-101偵察機。一年內，在五十架RF-101中只有四架沒被擊落，而且剩下四架的機身還布滿彈孔，已經無法再飛行了。我不知道這些飛行員在最後一次出任務時是如何把飛機開回來的。即使RF-4C是適應性較強的戰鬥機，但一年內還是有一半遭到擊落。我們已經提升存活率，然而仍有一半和我一樣出任務的人沒有再回到基地，雖然有些人在成為戰俘前已經幸運地被人從叢林中救起。</p>

  <h2 id="sigil_toc_id_7" data-cfi="/4/14" class="calibre3">癌細胞的啟發</h2>

  <p data-cfi="/4/16" class="calibre2">從越戰中返國後，我到史丹佛大學攻讀統計學碩士學位，一有時間就待在史丹佛大學人工智慧實驗室裡。後來我在科羅拉多大學醫學院攻讀生物統計學博士，之後成為空軍學院的數學教授。我的指導教授約翰．拜拉（John Bailar）博士是醫學暨統計學最知名的研究學者之一。我請教他該研究什麼有用的主題，研究結果才不會在圖書館裡被束諸高閣，堆滿灰塵。他交給我三百份醫學期刊上有關癌症的文章，每一份都有多張癌症的統計圖表，但有的是人類，有的則是動物，而腫瘤的類型也各不相同。拜拉博士表示，如果我能解釋為何它們都不相同，他就會授予我博士學位。而我辦到了，也順利取得學位。</p>

  <p data-cfi="/4/18" class="calibre2">我是怎麼做到的？我花費幾年的時間，努力找出細胞裡究竟發生什麼事才會變成癌細胞。我學到許多關於系統理論，以及系統為何只會存在某些穩定狀態的知識。一個細胞在演化時，會從一種穩定狀態進入另一種穩定狀態。我投入近十年的時間，研究一個複雜的調適系統從一種狀態進入另一種狀態的法則，以及應該如何讓它進入正面而非負面的新狀態。</p>

  <p data-cfi="/4/20" class="calibre2">幾年後，我發現組織、團隊及人都是複雜的調適系統。讓細胞從一種狀態轉為另一種狀態的因素，也會讓人從一種狀態進入另一種狀態。要改變細胞，首先你得把能量注入系統中。一開始會發生混亂，看起來似乎亂無章法，所有東西都在流動。當你對一個正在試圖改變的組織做這件事時，其成員往往會躁動不安，因為他們無法理解發生什麼事，也不知道該如何是好。但是，就和細胞一樣，組織在極快的速度下就會進入穩定的新狀態。唯一的問題在於，新狀態是否會比原本的狀態來得好。細胞現在是變成癌細胞或健康細胞？當時我很好奇，我們能否找出一些簡單的規則，引領團隊更有生產力、更快樂、更持久、更有樂趣，也更教人神往？接下來的十五年裡，我一直努力找答案。</p>

  <h2 id="sigil_toc_id_8" data-cfi="/4/22" class="calibre3">一次特別的經驗</h2>

  <p data-cfi="/4/24" class="calibre2">雷根總統主政時，政府大砍科學研究預算，包括國家癌症中心（National Cancer Centers）研究補助金，而我當時正是科羅拉多區域癌症中心（Colorado Regional Cancer Center）臨床實驗暨流行病學研究的資料蒐集與分析的計畫主持人。就在我思忖該做什麼時，一家名為中洲電腦服務（MidContinent Computer Services）的公司來找我，因為他們聽說我是他們最新技術領域中的頂尖專家。</p>

  <p data-cfi="/4/26" class="calibre2">當時中洲服務北美一百五十多家銀行，最熱門的新產品是他們所稱的「自動櫃員機」（Automatic Teller Machine, ATM）網路。那時是1983年，提領現金通常要到銀行排隊，或是開車經由銀行的得來速窗口領取。你得拿一張支票寫上你想要的金額，交給行員後再「兌現」。</p>

  <p data-cfi="/4/28" class="calibre2">ATM就是為此而生，但當時中洲公司的網路和其他網路之間無法順利連結。因此，他們需要一個對系統有想法的人來解決這個問題。他們提供優渥的報酬，請我擔任負責高階系統的副總裁。他們的網路電腦和我就讀博士班時好幾年都用來跑資料的那台電腦是一樣的，所以找我是找對人了。</p>

  <p data-cfi="/4/30" class="calibre2">那時我還覺得，這件差事真是再容易不過的，不是嗎？但當我進入該公司，迎接我的卻是一個採用瀑布法執行專案的部門。部門裡有數百名電腦程式設計師，整天坐在辦公桌前裝忙，卻無法在預算之內準時交差。該公司ATM的成本比營收還高出三成，這樣的無效率真教人驚訝。</p>

  <p data-cfi="/4/32" class="calibre2">剛開始我花費一些時間釐清事情的狀況。你可以想像管理高層是如何對待我的部下，現場經常可以聽見吼叫聲、太過瑣碎的管理，還有消極的反抗行為，以及要求員工要更認真工作、超時工作。但是無論管理階層如何施壓，專案時程依然落後、依然超支，也依然無法交出應有的成果。</p>

  <h2 id="sigil_toc_id_9" data-cfi="/4/34" class="calibre3">公司裡的小公司</h2>

  <p data-cfi="/4/36" class="calibre2">當時我判斷最好的選擇是徹底改變一切。團隊運作的情形已經糟到無法一點一點地修正，因此我決定在公司內部再設立一家公司。我請求執行長榮恩．哈利斯（Ron Harris）讓我成立另一個組織，把所有涉及ATM網路的人員都分派過去。新組織會有自己的業務團隊、行銷團隊及財務人員。哈利斯是一位很傑出、很有創造力的執行長，他非常信任我的專業。假如我是在別人的手下工作，搞不好永遠不可能會獲准這麼做。聽完我的想法後，他只說：「薩瑟蘭，如果你想要讓自己頭痛，就儘管去吧！」</p>

  <p data-cfi="/4/38" class="calibre2">我依言照做。我去找開發人員與經理，告訴他們：「我們要做的第一件事，就是停止再做那些快把我們自己搞死的事。」就像那一則老笑話所說的，在你停止用自己的頭去撞磚牆（譯注：喻白費力氣）之前，你一直都覺得還滿舒服的。「我們得找出更好的工作方式，」我說：「並且要立刻著手進行。」</p>

  <p data-cfi="/4/40" class="calibre2">我們把這家小公司當作分成幾個小組的團隊來經營。獎金的發放並不是根據個人績效，而是看全公司的績效。我們想出一些在十年後都融入Scrum中的輔助工具，像是「產品負責人」（Product Owner）、「產品待辦事項清單」（Product Backlog）及每週衝刺，後續我會再詳細介紹。在六個月的時間裡，我們是全公司最賺錢的部門。營收比支出高三成，我們的Nonstop Tandem系統是銀行業者第一批採用的連線交易電腦，顯見業者對我們的信任。整個北美都有我們產品的蹤跡。現在，你不管走到美國的哪個地方，都會看到ATM，它們精確地知道你有多少錢。這要大大歸功於我的團隊，是的，請不用客氣。</p>

  <h2 id="sigil_toc_id_10" data-cfi="/4/42" class="calibre3">學習機器人的思考方式</h2>

  <p data-cfi="/4/44" class="calibre2">我的第一段職涯在軍中，第二段在學術界，因此我發現自己是一個商業門外漢。然而，門外漢的觀點卻是我最有價值的資產。從第一天起，我就很納悶，為何人們都堅持以他們明知無效率、浪費心力、不人性而教人沮喪的方法做事，我猜想可能是因為他們認為大家都這樣做，才會覺得這一定是最佳方法。</p>

  <p data-cfi="/4/46" class="calibre2">我真的很享受在中洲的那段時光，但是當時我很想尋求一些新挑戰，來測試自己的技能。在接下來的二十年裡，我為許多大大小小的公司工作，擔任工程副總裁或技術長。在每份工作中，我的努力促成團隊用更有效能的方式合作。其中一家公司的辦公地點位於麻州劍橋市，距離麻省理工學院只有幾個街廓。當時有幾位博士與教授剛創辦一家開發機器人的新公司，但是因為在麻省理工學院的實驗室空間不夠，最後和我們公司分租辦公室。</p>

  <p data-cfi="/4/48" class="calibre2">我們公司搬進去幾個星期後，發生一件最出乎我意料的事：一個有六條腿、約莫貓咪般大小的機器人跑進我的辦公室，並且開始繞著辦公桌追著我跑。幾名機器人專家連忙跑進來，緊張地向我道歉，但是每隔幾天這件事又會一再發生。其中一個機器人甚至跑出實驗室，開始在大樓裡四處跑，我還聽到走廊上傳來機器腿發出的聲響。</p>

  <p data-cfi="/4/50" class="calibre2">每週五下午，我經常會在辦公室準備紅酒與啤酒，好讓員工們在一週的辛苦工作後放鬆並社交一下。我也會找走廊那頭的機器人專家們一起同樂。某次，洛尼．布魯克斯（Rodney Brooks）現身了。布魯克斯是麻省理工學院研究人工智慧的教授，也是這家機器人公司的創辦人之一。當時我詢問他這些四處走動的機器人是如何運作的。</p>

  <p data-cfi="/4/52" class="calibre2">「數十年來，我們一直在努力開發一種真正擁有聰明思維的機器，」他告訴我：「我們花費幾十億美元與無數年的研究，開發出最龐大的電腦，擁有最大的資料庫，但我們得到的只是一台足以在西洋棋上打敗人類的電腦。」</p>

  <p data-cfi="/4/54" class="calibre2">布魯克斯解說道：他的機器人是採用截然不同的開發方式。他們並未開發出只有一個頭腦中樞的機器人，而是在六條腿上都各有一個頭腦的機器人。裝設於脊柱上的處理器內建幾個簡單的規則：前進、後退、不要撞到其他的腿。神經網路晶片設置在機器人的頭部，機器人知道這些規則，也充當其他部位的協調者。當機器人撞上什麼障礙時，它會告訴每一條腿，自己透過相機看到什麼，大致是這樣。</p>

  <p data-cfi="/4/56" class="calibre2">有趣的是，布魯克斯表示，每次在啟動機器人時，它都是重新學習走路。它並未內建關於房間內每樣東西的資料庫，整個世界反倒都是它的資料庫。每次開啟電源時，機器人都是首次學習關於每樣東西的資訊。當機器人撞到什麼時，它會根據實際的環境狀況做出判斷，這意謂著它能適應任何環境。</p>

  <p data-cfi="/4/58" class="calibre2">「我展示給你看。」布魯克斯把我帶到他的實驗室。他把一片空白的神經晶片插入其中一個類爬蟲的機器人中，我就看著它搖搖晃晃地動了起來。一開始它在遲疑，在房間裡跌跌撞撞，就像一隻剛學走路、第一次用腿撐起自己的小鹿。每走一步，它的腳步就變得更平穩。</p>

  <p data-cfi="/4/60" class="calibre2">機器人的腿很快就學會彼此合作，不到幾分鐘，機器人已經可以在房間裡飛奔了，它的內部並未儲存如何走路的資料，也沒有寫入相關的程式，只是內建幾個讓不同元件間能彼此合作的簡單規則。機器人的腿並不懂得思考，只會實際身體力行。我對這麼獨特又簡單的系統讚不絕口，這和我過去接受在越南如何飛行的訓練完全一樣：<b data-cfi="/4/60/2" class="calibre14">觀察、導向、決定、行動。</b>機器人先理解環境狀況，再根據從中取得的資料，果決行動。</p>

  <p data-cfi="/4/62" class="calibre2">我問布魯克斯道：「假如我們能想出一套簡單的指令，提供給工作團隊，讓他們能像機器人的腿一樣彼此合作，你覺得如何？員工可以自我組織、自我最佳化，就像你的機器人那樣。」</p>

  <p data-cfi="/4/64" class="calibre2">「我不知道，」他回答道：「你何不試試看，然後告訴我成效如何？」</p>

  <h2 id="sigil_toc_id_11" data-cfi="/4/66" class="calibre3">別追逐瀑布</h2>

  <p data-cfi="/4/68" class="calibre2">我愈來愈覺得，如果我能創造出一個系統，讓它像機器人那樣，可以不時利用來自環境的回饋資訊，協調獨立思考的個體，這個系統將可創造出更高水準的績效。只要能在一群「腿與腿」之間維持資訊流的精簡，就能實現前所未有的高效能。</p>

  <p data-cfi="/4/70" class="calibre2">我和布魯克斯的對話發生在二十多年前。他在麻省理工學院擔任多年的機器人學暨人工智慧實驗室主任，而我曾見過的那個名為「成吉思汗」的類蜘蛛機器人，現在是存放在華府史密森尼（Smithsonian）博物館的收藏品。不過，現在你可能已經很熟悉布魯克斯的公司iRobot，該公司推出名為Roomba的真空吸塵器，而且運用和成吉思汗在辦公室裡追著我跑時同樣的適應式智慧。他在Rethink Robotics公司推出的最新創新產品Baxter機器人，能與處於相同工作空間中的人類合作。</p>

  <p data-cfi="/4/72" class="calibre2">布魯克斯的作品鼓舞了我。1993年，我帶著這些想法前往一家名為易守（Easel）的公司，擔任物件技術副總裁一職。那裡的高階主管們希望我的團隊在六個月內針對該公司一些大客戶，像是福特汽車，開發出全新的產品。福特汽車曾使用該公司的軟體來設計並打造內部的應用程式。我告訴我帶領的開發團隊成員，我很清楚，如果繼續使用那套開發軟體的舊手法，肯定不可能做得到。</p>

  <h3 class="sigil_not_in_toc" data-cfi="/4/74">擺脫瀑布，尋找最佳實務</h3>

  <p data-cfi="/4/76" class="calibre2">我在上一章中提到的「瀑布法」就是那套舊手法：和某專案相關的每件事，全都被小心翼翼地放置在偌大的甘特圖上，每項作業的所需時間也都已經精準預估，並且使用美麗的色彩強調，在頁面上就像瀑布一樣傾瀉而下。這些圖表美就美在內容的精確，但卻也是全然捏造出來的東西。</p>

  <p data-cfi="/4/78" class="calibre2">我在易守察覺到，採用這種瀑布法，就算不至於弄得超出期限好幾年，至少也會多出好幾個月。我們必須想出一套截然不同的工作方法。我去找執行長，告訴他要停用甘特圖。他十分震驚，希望知道原因。</p>

  <p data-cfi="/4/80" class="calibre2">「你在職涯中看過幾張甘特圖？」我問道。</p>

  <p data-cfi="/4/82" class="calibre2">「幾百張。」他答道。</p>

  <p data-cfi="/4/84" class="calibre2">「有幾張的內容符合實際狀況？」</p>

  <p data-cfi="/4/86" class="calibre2">他頓了頓後才道：「零。」</p>

  <p data-cfi="/4/88" class="calibre2">當時我告訴他，我準備在這個月月底就交出可操作的軟體，而非交給他沒用的甘特圖。他可以親身試用看看，檢視我們努力的方向是否正確，如果我們真的想在期限之前完成工作就必須這麼做。</p>

  <p data-cfi="/4/90" class="calibre2">我和我的團隊花費幾個星期的時間，閱讀好幾百篇談論團隊組織與產品開發的論文、書籍和文章。有一天，其中一位開發人員發現一篇1986年刊載在《哈佛商業評論》（<i data-cfi="/4/90/2" class="calibre4">Harvard Business Review</i>）的論文，作者是兩位日本企管教授竹內弘高與野中郁次郎，文章的標題是〈新新產品開發遊戲〉（<i data-cfi="/4/90/4" class="calibre4">The New New Product Development Game</i>）。他們檢視全球一些最具生產力與創新的企業團隊，包括本田汽車、富士全錄、3M、惠普等。兩人主張，既有的產品開發手法，也就是以美國太空總署的階段式方案規劃（Phased Program Planning）為典型的瀑布法系統，基本上是有瑕疵的。相對的，最出色的企業會使用更快速也更有彈性的疊合式開發流程。其團隊是跨部門的、是自主的，也有自行做決定的權力與卓越的目標，他們追求的是比自己還重要的價值。管理團隊並未頤指氣使，反倒是扮演僕人領袖和支持者的角色，專注於去除擋在團隊面前的阻礙，而非告訴團隊成員該如何開發產品，以及該開發什麼產品。兩位日本教授把傑出團隊比喻為橄欖球隊，還說最出色的團隊，表現得就像正在球場上爭球一樣：「……球在團隊內部一個傳一個，整個團隊在場上一條心。」<a class="footnote" href="#fnX-1" id="fX-1" data-cfi="/4/90/6">[1]</a></p>

  <h3 class="sigil_not_in_toc" data-cfi="/4/92">以日式管理為師</h3>

  <p data-cfi="/4/94" class="calibre2">竹內弘高與野中郁次郎的文章在當年剛發表時曾引發一陣轟動，但是距離我在易守讀到它時已經相隔七年。文章發表時，大家都很推崇其中的觀點，卻沒人試著加以運用。明明豐田汽車當時迅速運用這套做法擴大市占率，美國企業的管理者卻都未能詳加了解。不過，在易守的我們並沒有什麼好損失的，因此我們決定嘗試看看，即便這篇論文聚焦於製造，而非軟體開發。我覺得兩人的想法很貼近某些基本的事實──它描述出在任何專案中，人與人之間合作的最佳方式。它的內容和我早年第一份在中洲公司這家私人企業工作時曾做過的所有實驗是相通的。</p>

  <p data-cfi="/4/96" class="calibre2">「Scrum」就在此時正式誕生。我們在易守準時於六個月內完成產品，預算沒有超支，錯誤還比先前提過的任何版本都來得少。</p>

  <p data-cfi="/4/98" class="calibre2">我對於這種新式的專案管理手法甚感興奮，日後我的工作全都投注在協助企業把Scrum運用得更精純。1995年，我和施瓦布在計算機協會（Association for Computing Machinery）的研討會中發表一篇名為〈SCRUM開發流程〉（<i data-cfi="/4/98/2" class="calibre4">SCRUM Development Process</i>）的論文，整理出實際做法。在那之後，我們又略為修正部分內容，也不再使用全大寫的稱呼方法，但基本原則還是一樣的，而那些採用這套流程的企業，基本上都能看到立竿見影的效益。<a class="footnote" href="#fnX-2" id="fX-2" data-cfi="/4/98/4">[2]</a></p>

  <h2 id="sigil_toc_id_12" data-cfi="/4/100" class="calibre3">檢驗與調整</h2>

  <p data-cfi="/4/102" class="calibre2">運作得宜的Scrum團隊可望實現我們所稱的「超生產力」。或許令人難以置信，但是我們經常看到有些善於運用Scrum的團隊，生產力改善300%至400%，最出色的團隊甚至提升800%的生產力，並且不斷地複製成功經驗，最後的工作品質還是原本的兩倍以上。</p>

  <p data-cfi="/4/104" class="calibre2">所以，該如何把自主性、卓越性及跨部門交流的精神融入Scrum團隊中，進而實現超生產力呢？這就是我在本書後面章節要談的，但是現在我會先交代基本架構（附錄裡也有更簡潔的版本）。</p>

  <h3 class="sigil_not_in_toc" data-cfi="/4/106">戴明的影響力</h3>

  <p data-cfi="/4/108" class="calibre2">由於Scrum來自於日本製造業使用的技巧，因此值得我們多了解一下日本人是怎麼學來的。諷刺的是，大多數的內容都學自於一位美國人：戴明（W. Edwards Deming）。第二次世界大戰結束後，在美國占領日本期間，戴明曾為麥克阿瑟將軍工作。麥克阿瑟重建日本經濟的手法是開除日本公司的多數高階主管，提拔基層人員為直線主管，並從美國引進像戴明這種企業經營專家。戴明對日本製造業的影響極大，他訓練數百位工程師學會所謂的「統計製程管制」（statistical process control, SPC）。SPC的基本概念在於，要精確衡量已經完成的工作，以及成果的好壞，並追求「持續改善」。別只是改善一次，要持續改善。永遠都要找到可供改善之處，永遠不要安於現狀。至於如何實現，靠的是經常透過實驗找出怎麼做才會有所改善。嘗試過這個方法後，成果改善了嗎？另一個方法又如何呢？如果我調整其中的某個環節呢？</p>

  <p data-cfi="/4/110" class="calibre2">1950年，戴明曾對日本企業領導者進行一次知名的演說。聽眾中還包括索尼（Sony）創辦人之一的盛田昭夫。戴明在演說中告訴聽眾：</p>

  <div class="kai" data-cfi="/4/112">
    <p data-cfi="/4/112/2" class="calibre5">……無論你們的技術人員有多麼出色，身為領導者的你們都必須追求改善產品品質與一致性，技術人員才會懂得改善。因此，第一步就在管理階層的身上。首先，你必須讓技術人員與工廠知道，你是一個對於提升產品品質與一致性很有熱情的人，對於產品的品質也很有責任感。</p>

    <p data-cfi="/4/112/4" class="calibre5">假如你只是光說不練，這一切都不會發生。身體力行是很重要的。<a class="footnote" href="#fnX-3" id="fX-3" data-cfi="/4/112/4/2">[3]</a></p>
  </div>

  <h3 class="sigil_not_in_toc" data-cfi="/4/114">PDCA循環</h3>

  <p data-cfi="/4/116" class="calibre2">至於身體力行的方法，就是<b data-cfi="/4/116/2" class="calibre14">PDCA循環〔規劃（Plan）、執行（Do）、檢核（Check）、行動（Act）</b>〕，這或許也是戴明最出名的理論。這樣的循環幾乎可以用在任何東西的生產上，無論是汽車、電玩，甚至連紙飛機都行。</p>

  <p data-cfi="/4/118" class="calibre2">我在訓練大家學習Scrum時，用的正是紙飛機。我把他們分成幾組，要他們盡可能多做幾種能飛到房間另一頭的紙飛機。小組中會有三種角色：其中一人負責檢查做出來的紙飛機，看看有幾架能飛；另一人負責部分組裝流程，但是也要負責注意製作的流程本身，並且看看能否找出更好或更快的製作方式；剩下的所有人就專心在限定的組裝時間內，多做幾架真的能飛得那麼遠的紙飛機。</p>

  <p data-cfi="/4/120" class="calibre2">接著我會告知，紙飛機的製作以六分鐘為一個循環。這些小組有一分鐘的時間<b data-cfi="/4/120/2" class="calibre14">規劃</b>要如何製作飛機，三分鐘可以<b data-cfi="/4/120/4" class="calibre14">執行</b>，盡量多做幾架並測試飛行成效。最後他們有兩分鐘的時間來<b data-cfi="/4/120/6" class="calibre14">檢核</b>。在這個階段中，小組會設想：在紙飛機的製作過程中有什麼能改善的？哪裡做得對？哪裡做得不對？設計應該調整嗎？如何才能改善？接著他們就會<b data-cfi="/4/120/8" class="calibre14">行動</b>。在戴明的世界裡，「行動」意謂著根據實際成果與環境因素而改變工作方法，這和布魯克斯的機器人採用的策略是相同的。</p>

  <p data-cfi="/4/122" class="calibre2">只要這樣的循環進行三次，不管你是做紙飛機或真正的太空船，你不但會有所進步，而且是顯著的進步（速度大約快上兩三倍，品質至少翻倍）。戴明把PDCA循環教給日本人時，它還是頗為創新的概念，後來也是促成豐田汽車變成一流汽車製造商的關鍵。任何類型的「精實」（Lean）生產（美國人以此稱呼豐田生產系統的概念），或是Scrum的產品開發，依據的也都是PDCA。</p>

  <h2 id="sigil_toc_id_13" data-cfi="/4/124" class="calibre3">不改變，就等死</h2>

  <p data-cfi="/4/126" class="calibre2">之所以會這麼急需一種新的工作方法，之所以會有這麼多的公司採用它，部分的原因就在於，軟體開發的現況非常糟糕。專案絕大多數都延遲、超支，還經常不符合需求。這並非因為開發人員太愚笨或太貪婪，而是因為他們的工作方法有問題。他們堅持採用瀑布法，堅持每件事都要事先規劃好，甚至還堅持在專案長達數年的執行過程中不可以有任何改變，顯然是荒謬至極。</p>

  <p data-cfi="/4/128" class="calibre2">最早我是在南方貝爾（BellSouth）公司學到這件事的。幾年前，我曾以顧問身分造訪該公司。該公司有一流的工程師，很多人都來自於知名的貝爾實驗室（Bell Labs）。這些人把瀑布法執行得很完美。他們會標下一千萬美元至兩千萬美元的大型專案，會從客戶那裡蒐集需求，接著就會花費十八個月，在客戶要求的預算內按時交出東西，是全球極少數能把瀑布法執行得這麼好的公司。但問題在於，等到十八個月後，客戶真正想要的已經與當初想要的不同了。狀況改變了，商業循環縮短，客戶需要更多能回應環境的服務。</p>

  <p data-cfi="/4/130" class="calibre2">他們找我去是希望我幫助南方貝爾找出哪裡做得不對。我很快就意識到，問題在於他們的整套做法上。但是，在凡事似乎都做對的狀況下，他們很難聽進諫言。因此，我找了一天面對塞滿整間房間的一百五十名南方貝爾工程師，告訴他們：除非調整為截然不同、更能回應客戶需求的模式，未來公司將無法永續經營。然而，他們卻很堅持己見。雖然這些男男女女真的都很聰明，但是他們只把我的意見當成另一種管理風潮而已。我無法讓他們理解，因此我只是聳聳肩，丟給他們一句最後的警告：「不改變，就等死。」或許你可能注意到了，南方貝爾存活得並不久。</p>

  <h2 id="sigil_toc_id_14" data-cfi="/4/132" class="calibre3">守破離</h2>

  <p data-cfi="/4/134" class="calibre2">Scrum源自於日式思維與做法。我前一陣子到日本旅行，和野中郁次郎教授會晤時，他告訴我，現在日本已經不把Scrum當成最新穎的工作風尚了，而是視為一種做事方法、一種存在方式、一種生活型態。在教導別人如何運用Scrum時，我常會談到自己多年來學習日本武術合氣道時的個人體會。</p>

  <p data-cfi="/4/136" class="calibre2">Scrum，就像合氣道或者像跳探戈一樣，是一種你真的只能從做中學的學問，你的身體、思維及性靈可以透過經常的實踐與改善而趨於一致。在武術中有一種概念稱為「守破離」，分別是指三種不同的精通層次。「守」的狀態指的是你懂得所有規則與動作。你不斷重複動作，好讓身體學會，就像你在學習舞步時那樣。守就是能做到不會出錯。</p>

  <p data-cfi="/4/138" class="calibre2">「破」的狀態指的是，你在精熟動作之後開始懂得創新。像是跳舞時在地板上一踏後又自己多加一甩。</p>

  <p data-cfi="/4/140" class="calibre2">「離」的狀態指的是，你已經不受既有動作的限制，能夠真正融入其中，可以隨心所欲地創造新動作，因為對於合氣道或探戈的知識與意義已經了然於胸，你的一舉手一投足都會展現出精髓。</p>

  <p data-cfi="/4/142" class="calibre2">Scrum也很像這樣。它需要實作和專注，也需要持續投入心力達成新狀態，一種凡事自然而然流轉與發生的狀態。如果你看過傑出舞者或體操選手的精湛演出，你會發現他們的動作看起來是如此輕鬆自在，就像他們什麼都沒做，只是呈現出原本的自己一般。在那個當下，他們的樣子看起來就是那麼理所當然。某天，當一位身材矮小的合氣道大師不費吹灰之力就把我摔往空中時，我就有過這樣的體驗。他把我摔出去的手法，讓我輕巧地摔到墊子上，就像是他溫柔地把嬰兒放進搖籃裡一樣。</p>

  <p data-cfi="/4/144" class="calibre2">這是你會希望在Scrum中達到的境界，也是我希望大家融入生活中的境界。工作也可以不讓人抓狂，它可以很順暢，可以讓人樂在其中，可以是實現更崇高目標的調校過程。我們都能進步，我們都能卓越！我們只須放手去做。</p>

  <p data-cfi="/4/146" class="calibre2">我會在本書中每一章專門談論Scrum的一個面向。這些深入的探討是要讓各位知道Scrum概念背後的道理，以及為何Scrum會是這樣的結構。在附錄中列出Scrum的基本事項（解釋其定義），但是那個部分只告訴你該做什麼。如果你願意跟我一起，我會告訴你為什麼要那麼做。</p>

  <ol class="footnote1" data-cfi="/4/148">
    <li id="fnX-1" data-cfi="/4/148/2" class="calibre8">Takeuchi, Hirotaka, and Ikujiro Nonaka. “The New New Product Development Game.” Harvard Business Review, Jan./Feb. 1986: 285–305.<a href="#fX-1" data-cfi="/4/148/2/2"><img alt="返回" src="../Images/back.png" data-cfi="/4/148/2/2/2" class="calibre9"/></a></li>

    <li id="fnX-2" data-cfi="/4/148/4" class="calibre8">Schwaber, Ken. “Scrum Development Process,” in OOPSLA Business Object Design and Implementation Workshop, J. Sutherland, D. Patel, C. Casanave, J. Miller, and G. Hollowell, eds. (London: Springer, 1997).<a href="#fX-2" data-cfi="/4/148/4/2"><img alt="返回" src="../Images/back.png" data-cfi="/4/148/4/2/2" class="calibre9"/></a></li>

    <li id="fnX-3" data-cfi="/4/148/6" class="calibre8">Deming, W. Edwards. “To Management.” Speech at Mt. Hakone Conference Center, Japan, 1950.<a href="#fX-3" data-cfi="/4/148/6/2"><img alt="返回" src="../Images/back.png" data-cfi="/4/148/6/2/2" class="calibre9"/></a></li>
  </ol>

  <dl data-cfi="/4/150" class="calibre10">
    <dt data-cfi="/4/150/2" class="calibre11">本章重點摘要</dt>

    <dd data-cfi="/4/150/4" class="calibre12">
      <p data-cfi="/4/150/4/2" class="calibre13"><b data-cfi="/4/150/4/2/2" class="calibre14">遲疑是會致命的。</b>觀察、導向、決定、行動。了解身處何地、評估選項、做決定，然後行動！</p>

      <p data-cfi="/4/150/4/4" class="calibre13"><b data-cfi="/4/150/4/4/2" class="calibre14">向外部尋找答案。</b>複雜的適應系統都有少數幾項簡單法則可循，而且是從環境中學來的。</p>

      <p data-cfi="/4/150/4/6" class="calibre13"><b data-cfi="/4/150/4/6/2" class="calibre14">出色的團隊是：</b>跨功能、自主、得到授權，具有崇高目標。</p>

      <p data-cfi="/4/150/4/8" class="calibre13"><b data-cfi="/4/150/4/8/2" class="calibre14">別用猜的，要規劃、執行、檢核、行動。</b>規劃好你要做什麼，然後執行。檢核成果是否如同預期，然後據此採取行動、調整做法。一直重複這樣的循環，就能實現持續改善。</p>

      <p data-cfi="/4/150/4/10" class="calibre15"><b data-cfi="/4/150/4/10/2" class="calibre14">守破離。</b>首先，要學會規則與動作，等到精熟之後開始創新。最後，進入高度精熟的狀態，捨棄形式，只是自然而然地存在，因為一切都已內化，可以不假思索就做出決定。</p>
    </dd>
  </dl>
</body>
</html>
